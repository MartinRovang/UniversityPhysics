import numpy as np
import math
import matplotlib.pyplot as plt
from scipy.stats import norm
import pandas as pd
import seaborn as sns

Asetek = pd.read_csv('ASETEK.OLdays.csv')







def monte(df,numbers,days):
    i = 0
    histt = []
    while numbers > i:
        df['Returns'] = df['Adj Close'].pct_change()
        vol = df['Returns'].var()
        std = df['Returns'].std()
        mu = df['Returns'].mean()
        S = df['Adj Close'].values[-1]
        price_list = [S]
        daily_returns = np.random.normal((mu/days),std/np.sqrt(days),days)+1
        for x in daily_returns:
            price_list.append(price_list[-1]*x)
        i += 1
        plotting = plt.plot(price_list)
        histt.append(price_list[-1])
    plt.figure()
    sns.distplot(histt, hist=True, rug=True)
    plt.show()
    
monte(Asetek,300,30)




#calculate the compound annual growth rate (CAGR) which 
#will give us our mean return input (mu) 


# days = (Asetek.index[-1] - Asetek.index[0]).days
# cagr = ((((apple['Adj Close'][-1]) / apple['Adj Close'][1])) ** (365.0/days)) - 1
# print ('CAGR =',str(round(cagr,4)*100)+"%")
# mu = cagr

# #create a series of percentage returns and calculate 
# #the annual volatility of returns
# apple['Returns'] = apple['Adj Close'].pct_change()
# vol = apple['Returns'].std()*sqrt(252)
# print ("Annual Volatility =",str(round(vol,4)*100)+"%")



# #Define Variables
# S = apple['Adj Close'][-1] #starting stock price (i.e. last available real stock price)
# T = 252 #Number of trading days
# mu = 0.2309 #Return
# vol = 0.4259 #Volatility

# #create list of daily returns using random normal distribution
# daily_returns=np.random.normal((mu/T),vol/math.sqrt(T),T)+1

# #set starting price and create price series generated by above random daily returns
# price_list = [S]

# for x in daily_returns:
#     price_list.append(price_list[-1]*x)

# #Generate Plots - price series and histogram of daily returns
# plt.plot(price_list)
# plt.show()
# plt.hist(daily_returns-1, 100) #Note that we run the line plot and histogram separately, not simultaneously.
# plt.show()